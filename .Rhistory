?rnorm
?na.rm
??na.rm
?lm
search()
search(lm)
cube <- function(x,n) {}
cube <- function(x,n) {
search()
library(AppliedPredictiveModeling)
data(segmentationOriginal)
library(caret)
names(segmentationOriginal)
head(segmentationOriginal$TotalIntench2)
head(segmentationOriginal$TotalIntenCh2)
head(segmentationOriginal$FiberWidthCh1)
head(segmentationOriginal$Case)
head(segmentationOriginal$Class)
ansA <- segmentationOriginal[which(TotalIntenCh2 == 23,000 & FiberWidthCh1 == 10 & PerimStatusCh1==2),]
set.seed(125)
# subset data according to Case type
training<-subset(segmentationOriginal,segmentationOriginal$Case=="Train")
testing <- subset(segmentationOriginal,segmentationOriginal$Case=="Test")
modFit <- train(Class ~., method ="rpart", data = training)
library(rattle)
install.packages("rattle")
modFit <- train(Class ~., method ="rpart", data = training)
predictions <-predict(modFit,newdata=testing)
library(rattle)
fancyRpartPlot(modFit$finalModel)
RpartPlot(modFit$finalModel)
install.packages("rpart.plot")
fancyRpartPlot(modFit$finalModel)
install.packages("pgmm")
library(pgmm)
data(olive)
olive = olive[,-1]
names(olive)
mFit <- tree(Area~., data = olive)
install.packages("tree")
mFit <- tree(Area~., data = olive)
library(tree)
mFit <- tree(Area~., data = olive)
mFit
head(olive$Area)
newdata = as.data.frame(t(colMeans(olive)))
newdata
mFit2 <- train(Area~., method ="rpart", data = olive)
predict(mFit2, newdata=newdata)
predict(mFit, newdata=newdata)
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
install.packages("ElemStatLearn")
library(ElemStatLearn)
data(SAheart)
set.seed(8484)
train = sample(1:dim(SAheart)[1],size=dim(SAheart)[1]/2,replace=F)
trainSA = SAheart[train,]
testSA = SAheart[-train,]
set.seed(13234)
#Fit a logistic model to dataset with 'chd' as outcome
logitmodel <- train(chd ~ age+alcohol+obesity+tobacco+typea+ldl,
method = "glm",
family = "binomial",
data = trainSA)
#Run prediction on the testSA dataset
prediction <- predict(logitmodel, newdata = testSA)
#calculate the misclassification of the test dataset
missClass = function(values,prediction){
sum(((prediction > 0.5)*1) != values)/length(values)
}
missClass(testSA$chd, prediction)
missClass(trainSA$chd, prediction)
library(ElemStatLearn)
data(vowel.train)
data(vowel.test)
vowel.train$y <- factor(vowel.train$y)
vowel.test$y <- factor(vowel.test$y)
library(randomForest)
set.seed(33833)
modelfit<-randomForest(y~.,data=vowel.train)
varImp(modelfit)
varImp(modelfit,order=TRUE)
?varImp
varImp(modelfit,decreasing=TRUE)
set.seed(33833)
rfmod <- train(y~.method="rf",data=vowel.train)
gbmmod <- train(y~.method="gbm",data=vowel.train)
rfmod <- train(y~.,method="rf",data=vowel.train)
gbmmod <- train(y~.,method="gbm",data=vowel.train)
predict_rf <- predict(rfmod,vowel.test)
predict_gbm <- predict(gbmmod,vowel.test)
confusionMatrix(predict_rf,vowel.test$y)
confusionMatrix(predict_gbm,vowel.test$y)
confusionMatrix(predict_rf,predict_gbm)
library(caret)
library(gbm)
set.seed(3433)
library(AppliedPredictiveModeling)
data(AlzheimerDisease)
adData = data.frame(diagnosis,predictors)
inTrain = createDataPartition(adData$diagnosis, p = 3/4)[[1]]
q2training = adData[ inTrain,]
q2testing = adData[-inTrain,]
modRF <- train(diagnosis~., method="rf", data=q2training)
modGBM <- train(diagnosis~., method="gbm", data=q2training, verbose=FALSE)
modLDA <- train(diagnosis~., method="lda", data=q2training)
predRF <- predict(modRF, q2testing)
predGBM <- predict(modGBM, q2testing)
predLDA <- predict(modLDA, q2testing)
newDF = data.frame(predRF,predGBM,predLDA,diagnosis=q2testing$diagnosis)
modStacked <- train(diagnosis~.,data=newDF, method="rf")
#Now you have made the stacked model, you are ready to test it on the testing set.  But before you can use it, you have to make a newtestingdataframe by consisting the first three model predictions on the testingset and the variable in the testing set you want to predict.
predALL <- predict(modStacked,newDF)
confusionMatrix(predRF,q2testing$diagnosis)
confusionMatrix(predGBM,q2testing$diagnosis)
confusionMatrix(predLDA,q2testing$diagnosis)
confusionMatrix(predALL,q2testing$diagnosis)
?plot.enet
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
q3training = concrete[ inTrain,]
q3testing = concrete[-inTrain,]
q3Fit <- train(CompressiveStrength ~ .,data=q3training,method="lasso", trace=TRUE)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
q3training = concrete[ inTrain,]
q3testing = concrete[-inTrain,]
q3Fit <- train(CompressiveStrength ~ .,data=q3training,method="lasso", trace=TRUE)
names(q3testing)
set.seed(3523)
library(AppliedPredictiveModeling)
data(concrete)
inTrain = createDataPartition(concrete$CompressiveStrength, p = 3/4)[[1]]
q5training = concrete[ inTrain,]
q5testing = concrete[-inTrain,]
library(e1071)
q5model <- svm(CompressiveStrength~.,data=q5training)
q5pred <- predict(q5model,q5testing)
sqrt(sum((q5pred-q5testing$CompressiveStrength)^2))
rmse(q5pred-q5testing$CompressiveStrength)
set.seed(325)
q5model <- svm(CompressiveStrength~.,data=q5training)
q5pred <- predict(q5model,q5testing)
sqrt(sum((q5pred-q5testing$CompressiveStrength)^2))
confusionMatrix(q5pred,q5testing$CompressiveStrength)
head(q5testing)
str(q5testing)
str(q5pred)
?as.num
is.chr
?is.chr
head(q5pred)
q5pred
q5pred-q5testing$CompressiveStrength
sum((q5pred-q5testing$CompressiveStrength)^2)
sprt(11543)
sqrt(11543)
accuracy(q5pred,q5testing$CompressiveStrength)
install.packages("forecast")
library(forecast)
accuracy(q5pred,q5testing$CompressiveStrength)
sqrt(mean((q5pred-q5testing$CompressiveStrength)^2))
library(elasticnet)
plot.enet(q3Fit$finalModel, xvar = "penalty", use.color = TRUE)
x <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
y <- c(1.39, 0.72, 1.55, 0.48, 1.19, -1.59, 1.23, -0.65, 1.49, 0.05)
lm(x~y)
?lm
lm(x~0+y)
lm(y~0+x)
data(mtcars)
lm(mpg~weight, data=mtcars)
name(mtcars)
names(mtcars)
lm(mpg~wt, data=mtcars)
x2 <- c(8.58, 10.46, 9.01, 9.64, 8.86)
mean(x2)
x2new <- x2/9.31
mean(x2new)
lm(y~x)
x9 <- c(0.8, 0.47, 0.51, 0.73, 0.36, 0.58, 0.57, 0.85, 0.44, 0.42)
lsfit(x9)
sum((x9-0.573)^2)
sum((x9-0.8)^2)
sum((x9-0.36)^2)
sum((x9-0.44)^2)
lm(y~x)
lm(x~y)
1.567/0.599
cor(y,x)
cor(x,y)
0.599/1.567
data(ToothGrowth)
str(ToothGrowth)
summary(ToothGrowth)
?ToothGrowth
require(graphics)
coplot(len ~ dose | supp, data = ToothGrowth, panel = panel.smooth,
xlab = "ToothGrowth data: length vs dose, given type of supplement")
plot(ToothGrowth$dose~ToothGrowth$len)
plot(ToothGrowth$len~ToothGrowth$dose)
?tapply
bwplot(ToothGrowth$len~ToothGrowth$dose|ToothGrowth$supp)
library("lattice")
bwplot(ToothGrowth$len~ToothGrowth$dose|ToothGrowth$supp)
ToothGrowth$dose <- as.factor(ToothGrowth$dose)
str(ToothGrowth)
bwplot(ToothGrowth$len~ToothGrowth$dose|ToothGrowth$supp)
tograph <- table(ToothGrowth$supp,ToothGrowth$dose)
barplot(tograph, beside=TRUE)
bwplot(ToothGrowth$len~ToothGrowth$dose|ToothGrowth$supp)
bwplot(ToothGrowth$len~ToothGrowth$dose|ToothGrowth$supp)
points(ToothGrowth$len~ToothGrowth$dose|ToothGrowth$supp)
bwplot(ToothGrowth$len~ToothGrowth$dose|ToothGrowth$supp)
boxplot(ToothGrowth$len~ToothGrowth$dose|ToothGrowth$supp)
boxplot(ToothGrowth$len~ToothGrowth$dose)
boxplot(ToothGrowth)
boxplot(ToothGrowth$len)
boxplot(ToothGrowth$len~ToothGrowth$dose)
library(ggplot2)
p <- ggplot(ToothGrowth, aes(factor(supp), len))
print(p)
p <- ggplot(ToothGrowth, aes(factor(supp), len))
p
p <- ggplot(ToothGrowth, aes(factor(supp), len))
p <- p + geom_boxplot()
p
p <- ggplot(ToothGrowth, aes(factor(dose), len))
p <- p + geom_boxplot()
p
p <- ggplot(ToothGrowth, aes(factor(dose), len))
p <- p + geom_boxplot() + geom_jitter()
p
p <- ggplot(ToothGrowth, aes(factor(dose), len))
p <- p + geom_boxplot(aes(fill = factor(supp))) + geom_jitter()
p
p <- ggplot(ToothGrowth, aes(factor(dose), len))
p <- p + geom_boxplot(aes(fill = factor(supp))) + geom_jitter(aes(color = factor(supp)))
p
p <- ggplot(ToothGrowth, aes(factor(dose), len))
p <- p + geom_boxplot(aes(fill = factor(supp))) + geom_point(aes(color = factor(supp)))
p
p <- ggplot(ToothGrowth, aes(factor(dose), len))
p <- p + geom_boxplot(aes(fill = factor(supp))) + geom_jitter(aes(color = factor(supp)))
p
str(ToothGrowth$dose)
summary(ToothGrowth$dose)
summary(ToothGrowth$supp)
dose0510 <- ToothGrowth[dose %in% c(0.5, 1.0)),]
dose0510 <- ToothGrowth[dose %in% c(0.5, 1.0),]
dose3 <- subset(ToothGrowth, c(0.5, 2.0) %in% dose)
head(dose3)
tail(dose3)
setwd("~/R projects/dataproducts/shinyproject")
bp <- read.csv(file="bloodpressure.csv",header=TRUE)
head(bp)
runApp("shinyproject")
library(shiny)
runApp("shinyproject")
setwd("~/R projects/dataproducts")
runApp("shinyproject")
runApp("shinyproject")
runApp("shinyproject")
runApp("shinyproject")
runApp("shinyproject")
runApp("shinyproject")
runApp("shinyproject")
runApp("shinyproject")
runApp("shinyproject")
runApp("shinyproject")
runApp("shinyproject")
runApp("shinyproject")
runApp("shinyproject")
shiny::runApp('shinyproject')
shiny::runApp('shinyproject')
str(bp)
shiny::runApp('shinyproject')
shiny::runApp('shinyproject')
runApp("shinyproject")
str(input)
print(input$age[1])
shiny::runApp('shinyproject')
shiny::runApp('shinyproject')
shiny::runApp('shinyproject')
shiny::runApp('shinyproject')
shiny::runApp('shinyproject')
runApp("shinyproject")
runApp("shinyproject")
runApp("shinyproject")
runApp("shinyproject")
shiny::runApp('shinyproject')
runApp("shinyproject")
shiny::runApp('shinyproject')
shiny::runApp('shinyproject')
shiny::runApp('shinyproject')
shiny::runApp('shinyproject')
shiny::runApp('shinyproject')
shiny::runApp('shinyproject')
shiny::runApp('shinyproject')
shiny::runApp('shinyproject')
shiny::runApp('shinyproject')
shiny::runApp('shinyproject')
shiny::runApp('shinyproject')
shiny::runApp('shinyproject')
shiny::runApp('shinyproject')
deployApp()
devtools::install_github('rstudio/shinyapps')
library(shinyapps)
shinyapps::setAccountInfo(name='kjco', token='441428DB29B0352324BB8251292DD1FD', secret='aWTfy3uPF+2zg5hWitqIt+cWlgHxkEP4k9Eh4BjX')
deployApp()
deployApp()
setwd("~/R projects/dataproducts/shinyproject")
deployApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
shiny::runApp()
runApp("shinyproject")
setwd("~/R projects/dataproducts")
runApp("shinyproject")
runApp("visbp")
runApp("visbp")
runApp("visbp")
shiny::runApp('visbp')
shiny::runApp('visbp')
shiny::runApp('visbp')
setwd("~/R projects/dataproducts/visbp")
setwd("~/R projects/dataproducts")
shiny::runApp('visbp')
setwd("~/R projects/dataproducts/visbp")
deployApp()
shiny::runApp()
setwd("~/R projects/dataproducts/visbp")
deployApp()
install_github('slidify', 'ramnathv')
require(devtools)
install_github('slidify', 'ramnathv')
install_github('slidifyLibraries', 'ramnathv')
setwd("~/R projects/dataproducts")
author("mydeck")
library(slidify)
author("mydeck")
install.packages("gridExtra")
setwd("~/R projects/dataproducts/mydeck")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
setwd("~/R projects/dataproducts")
shiny::runApp('visbp')
shiny::runApp('visbp')
shiny::runApp('visbp')
shiny::runApp('visbp')
setwd("~/R projects/dataproducts/mydeck")
slidify("index.Rmd")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
browseURL("index.html")
slidify("index.Rmd")
browseURL("index.html")
publish(title = 'visbp', 'index.html', host = 'rpubs')
publish(title = 'visbp', 'index.html', host = 'rpubs')
slidify("index.Rmd")
browseURL("index.html")
publish(title = 'visbp', 'index.html', host = 'rpubs')
slidify("index.Rmd")
browseURL("index.html")
publish(title = 'visbp', 'index.html', host = 'rpubs')
publish(title = 'mydeck', 'index.html', host = 'rpubs')
